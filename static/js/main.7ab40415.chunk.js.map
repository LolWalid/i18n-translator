{"version":3,"sources":["components/Translation.jsx","components/TranslationList.jsx","containers/TranslationList.js","actions/index.js","components/FormInput.jsx","components/TranslationForm.jsx","containers/TranslationForm.js","components/App.js","serviceWorker.js","reducers/translations.js","reducers/index.js","index.js","config/Constants.js"],"names":["Translation","_ref","onClick","i18nKey","editing","react_default","a","createElement","style","background-color","cursor","TranslationList","translations","markEditing","map","translation","components_Translation","Object","assign","key","id","connect","state","dispatch","type","FormInput","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","selectedKey","event","traduction","target","value","setState","onChange","locale","rows","cols","React","Component","TranslationForm","objectSpread","handleSubmit","onInputChange","preventDefault","updateTranslation","defineProperty","onSubmit","FormInput_FormInput","fr","en","find","t","_ref2","App","className","containers_TranslationList","containers_TranslationForm","Boolean","window","location","hostname","match","arguments","length","undefined","action","concat","toConsumableArray","combineReducers","store","createStore","rootReducer","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ab40415.chunk.js","sourcesContent":["import React from 'react';\n\nconst Translation = ({ onClick, i18nKey, editing }) => (\n  <div onClick={onClick} style={{'background-color': editing ? 'red' : '', cursor: 'pointer' }}>\n    <p>{i18nKey}</p>\n  </div>\n)\n\nexport default Translation\n","import React from 'react'\nimport Translation from './Translation';\n\nconst TranslationList = ({ translations, markEditing }) => (\n  <ul>\n    {translations.map(translation =>\n      <Translation\n        key={translation.id}\n        onClick={ () => markEditing(translation.id) }\n        {...translation}\n      />\n    )}\n  </ul>\n)\n\nexport default TranslationList\n","import { connect } from 'react-redux'\nimport { markEditing } from '../actions'\nimport TranslationList from '../components/TranslationList'\n\n\nconst getTranslations = (translations, filter) => {\n    return translations\n}\n\nconst mapStateToProps = state => ({\n  translations: getTranslations(state.translations)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  markEditing: id => dispatch(markEditing(id))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TranslationList)\n","export const addTranslation = ({key, fr, en}) => ({\n  type: 'ADD_TRANSLATION',\n  key,\n  fr,\n  en\n})\n\nexport const markEditing = id => ({\n  type: 'MARK_EDITING',\n  id\n})\n\nexport const updateTranslation = ({id, fr, en}) => ({\n  type: 'EDIT_TRANSLATION',\n  id,\n  fr,\n  en\n})\n","import React from 'react';\n\nexport default class FormInput extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      selectedKey: this.props.selectedKey,\n      translation: this.props.translation || ''\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.selectedKey !== props.selectedKey) {\n      return {\n        selectedKey: props.selectedKey,\n        translation: props.translation || ''\n      }\n    }\n    return null;\n  }\n\n  handleChange(event) {\n    let traduction = event.target.value\n    this.setState({ translation: traduction })\n    this.props.onChange({ locale: this.props.locale, translation: traduction})\n  }\n\n  render() {\n    return (\n      <div>\n        <h4>{this.props.locale}</h4>\n        <textarea value={this.state.translation} rows=\"4\" cols=\"50\" onChange={this.handleChange}/>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport FormInput from './FormInput';\n\nclass TranslationForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { ...props.translation }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.id !== props.translation.id) {\n      return { ...props.translation }\n    }\n    return null;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    this.props.updateTranslation({...this.props.translation, ...this.state});\n  }\n\n  onInputChange({locale, translation}) {\n    this.setState({[locale]: translation})\n  }\n\n  render() {\n    let { translation } = this.props\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <FormInput\n          locale={'fr'}\n          selectedKey={translation.i18nKey}\n          translation={translation.fr}\n          onChange={this.onInputChange}\n        />\n        <FormInput\n          locale={'en'}\n          selectedKey={translation.i18nKey}\n          translation={translation.en}\n          onChange={this.onInputChange}\n        />\n        <button type=\"submit\"> Save </button>\n      </form>\n    )\n  }\n}\n\nexport default TranslationForm\n","import { connect } from 'react-redux'\nimport { updateTranslation } from '../actions'\nimport TranslationForm from '../components/TranslationForm'\n\nconst getTranslation = (translations, filter) => {\n  return translations.find(t => t.editing)\n}\n\nconst mapStateToProps = state => ({\n  translation: getTranslation(state.translations)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  updateTranslation: id => dispatch(updateTranslation(id))\n})\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TranslationForm)\n","import React from 'react';\nimport './App.css';\nimport TranslationList from '../containers/TranslationList'\nimport TranslationForm from '../containers/TranslationForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TranslationList />\n      <TranslationForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const translations = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TRANSLATION':\n      return [\n        ...state,\n        {\n          id: state.length + 1,\n          key: action.key,\n          fr: action.fr,\n          en: action.en,\n          editing: false\n        }\n      ]\n    case 'EDIT_TRANSLATION':\n      return state.map(translation => (\n        translation.id === action.id) ? {...translation, fr: action.fr, en: action.en} : translation\n      )\n    case 'MARK_EDITING':\n      return state.map(translation => (\n        translation.id === action.id) ? {...translation, editing: true} : { ...translation, editing: false }\n      )\n    default:\n      return state\n  }\n}\n\nexport default translations\n\n\n","import { combineReducers } from 'redux'\nimport translations from './translations'\n\nexport default combineReducers({\n  translations\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\nimport { translations } from './config/Constants'\n\nconst store = createStore(rootReducer, { translations: translations })\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const availableLocales = ['fr', 'en'];\n\nlet translations = [\n  { id: 1, i18nKey: 'admin.create.success', fr: \"administrateur a été créé\", en: '', editing: true},\n  { id: 2, i18nKey: 'admin.create.failure', fr: \"administrateur n'a pas pu être créé\", en: '', editing: false},\n  { id: 3, i18nKey: 'project.create', fr: '', en: '', editing: false},\n  { id: 4, i18nKey: 'project.change_amount.success', fr: \"le montant de votre projet a été modifié\", en: '', editing: false},\n  { id: 5, i18nKey: 'user.notify.account_changed', fr: \"votre compte a bien été modifié\", en: '', editing: false}\n]\n\nexport { availableLocales, translations }\n"],"sourceRoot":""}