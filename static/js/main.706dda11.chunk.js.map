{"version":3,"sources":["components/ListElement.jsx","components/FormInput.jsx","config/Constants.js","components/Form.jsx","components/List.jsx","pages/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["ListElement","react_default","a","createElement","onClick","this","props","i18nKey","React","Component","FormInput","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","state","selectedKey","translation","event","setState","target","value","locale","rows","cols","onChange","availableLocales","translations","admin.create.success","fr","en","admin.create.failure","project.create","project.change_amount.success","user.notify.account_changed","keys","Form","availableLocalesForm","map","index","FormInput_FormInput","key","List","renderKeysList","Form_Form","_this2","ListElement_ListElement","_","Home","List_List","App","className","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.706dda11.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class ListElement extends React.Component{\n  render() {\n    return (\n      <div onClick={this.props.onClick}>\n        <p>{this.props.i18nKey}</p>\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nexport default class FormInput extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      selectedKey: this.props.selectedKey,\n      translation: this.props.translation || ''\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (state.selectedKey !== props.selectedKey) {\n      return {\n        selectedKey: props.selectedKey,\n        translation: props.translation || ''\n      }\n    }\n    return null;\n  }\n\n  handleChange(event) {\n    this.setState({translation: event.target.value})\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.props.locale}</h1>\n        <textarea value={this.state.translation} rows=\"4\" cols=\"50\" onChange={this.handleChange}/>\n      </div>\n    )\n  }\n}\n","// All will be move to redux !\nconst availableLocales = ['fr', 'en'];\n\nlet translations = {\n  'admin.create.success'          : { fr: \"administrateur a été créé\", en: null },\n  'admin.create.failure'          : { fr: \"administrateur n'a pas pu être créé\", en: null },\n  'project.create'                : { fr: null, en: null },\n  'project.change_amount.success' : { fr: \"le montant de votre projet a été modifié\", en: null },\n  'user.notify.account_changed'   : { fr: \"votre compte a bien été modifié\", en: null  }\n}\n\nlet keys = ['admin.create.success', 'admin.create.failure', 'project.create', 'project.change_amount.success', 'user.notify.account_changed']\n\n\nexport { availableLocales, keys, translations }\n","import React from 'react';\nimport FormInput from './FormInput';\nimport { availableLocales, translations } from '../config/Constants'\n\nexport default class Form extends React.Component {\n  render() {\n    return (<div>{ this.availableLocalesForm() }</div>)\n  }\n\n  availableLocalesForm() {\n    return (\n      availableLocales.map( (locale, index) => {\n        return (<FormInput\n          key={index}\n          locale={locale}\n          selectedKey={this.props.selectedKey}\n          translation={translations[this.props.selectedKey][locale]}\n          />)\n      })\n    )\n  }\n}\n","import React from 'react';\nimport ListElement from './ListElement';\nimport Form from './Form';\nimport { keys } from '../config/Constants';\n\nexport default class List extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedKey: keys[0]\n    }\n  }\n\n  onClick(selectedKey) {\n    this.setState({ selectedKey })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderKeysList()}\n        <Form\n          selectedKey={this.state.selectedKey} />\n      </div>\n    )\n  }\n\n  renderKeysList() {\n    return (keys.map((i18nKey, index) => {\n      return <ListElement\n              key={index}\n              onClick={_ => this.onClick(i18nKey)}\n              i18nKey={i18nKey} />\n    }))\n  }\n}\n","import React from 'react';\nimport TranslationList from '../components/List'\n\nexport default class Home extends React.Component{\n  render() {\n    return (<TranslationList />)\n  }\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}